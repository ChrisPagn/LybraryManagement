@page "/games"
@using MudBlazor
@using LybraryManagement.Services
@using LybraryManagement.Shared.Library.DTOs
@inject IHttpClientFactory HttpFactory
@inject ISnackbar Snackbar

<PageTitle>Jeux</PageTitle>

<MudPaper Class="pa-4">
    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h5">Jeux</MudText>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreate">Ajouter</MudButton>
    </MudStack>

    <MudTable Items="games" Dense="true" Hover="true" Class="mt-4">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>ItemId</MudTh>
            <MudTh>Titre</MudTh>
            <MudTh>Createur</MudTh>
            <MudTh>Editeur</MudTh>
            <MudTh>Annee</MudTh>
            <MudTh>Plateforme</MudTh>
            <MudTh>Age</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.GameId</MudTd>
            <MudTd DataLabel="ItemId">@context.ItemId</MudTd>
            <MudTd DataLabel="Titre">@context.Item?.Title</MudTd>
            <MudTd DataLabel="Createur">@context.Item?.Creator</MudTd>
            <MudTd DataLabel="Editeur">@context.Item?.Publisher</MudTd>
            <MudTd DataLabel="Annee">@context.Item?.Year</MudTd>
            <MudTd DataLabel="Plateforme">@context.Platform</MudTd>
            <MudTd DataLabel="Age">@context.AgeRange</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OpenEdit(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => Delete(context)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@if (dialogVisible)
{
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6">@dialogTitle</MudText>
        <MudForm @ref="form">
            <MudNumericField T="int" @bind-Value="itemId" Label="ItemId" Required="true" />
            <MudTextField @bind-Value="platform" Label="Plateforme" />
            <MudTextField @bind-Value="ageRange" Label="Age" />
        </MudForm>
        <MudStack Row Spacing="2" Class="mt-2">
            <MudButton OnClick="Save" Color="Color.Primary">Enregistrer</MudButton>
            <MudButton OnClick="() => dialogVisible = false">Annuler</MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private List<GameDto> games = new();
    private bool dialogVisible;
    private string dialogTitle = string.Empty;
    private MudForm? form;
    private int itemId;
    private string? platform;
    private string? ageRange;
    private int? editingId;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync() => games = (await ApiClient.GetAsync<List<GameDto>>(HttpFactory, "api/games")) ?? new();

    private void OpenCreate()
    {
        dialogTitle = "Nouveau jeu";
        editingId = null;
        itemId = 0;
        platform = null;
        ageRange = null;
        dialogVisible = true;
    }

    private void OpenEdit(GameDto dto)
    {
        dialogTitle = $"Modifier #" + dto.GameId;
        editingId = dto.GameId;
        itemId = dto.ItemId;
        platform = dto.Platform;
        ageRange = dto.AgeRange;
        dialogVisible = true;
    }

    private async Task Save()
    {
        await form!.Validate();
        if (!form.IsValid) return;

        if (editingId is null)
        {
            var resp = await ApiClient.PostAsync(HttpFactory, "api/games", new CreateGameDto(itemId, platform, ageRange));
            if (!resp.IsSuccessStatusCode) { Snackbar.Add("Erreur de creation", Severity.Error); return; }
        }
        else
        {
            var resp = await ApiClient.PutAsync(HttpFactory, $"api/games/{editingId}", new UpdateGameDto(itemId, platform, ageRange));
            if (!resp.IsSuccessStatusCode) { Snackbar.Add("Erreur de mise a jour", Severity.Error); return; }
        }

        dialogVisible = false;
        await LoadAsync();
        Snackbar.Add("Enregistre", Severity.Success);
    }

    private async Task Delete(GameDto dto)
    {
        var resp = await ApiClient.DeleteAsync(HttpFactory, $"api/games/{dto.GameId}");
        if (!resp.IsSuccessStatusCode) { Snackbar.Add("Suppression echouee", Severity.Error); return; }
        await LoadAsync();
        Snackbar.Add("Supprime", Severity.Success);
    }
}

