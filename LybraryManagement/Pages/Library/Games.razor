@page "/games"
@using MudBlazor
@using LybraryManagement.Services
@using LybraryManagement.Shared.Library.DTOs
@inject IHttpClientFactory HttpFactory
@inject ISnackbar Snackbar

<PageTitle>Jeux</PageTitle>

<div class="page-background"></div>

<div class="content-wrapper animate-in">
    <MudPaper Class="glass-paper pa-4 mb-4">
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.SportsEsports" Size="Size.Large" Style="color: white;" />
                <MudText Typo="Typo.h5">Jeux</MudText>
            </MudStack>
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="OpenCreate"
                       Size="Size.Large">
                Ajouter un jeu
            </MudButton>
        </MudStack>
    </MudPaper>

    <MudPaper Class="glass-paper pa-4">
        @if (games == null || !games.Any())
        {
            <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="pa-8">
                <MudIcon Icon="@Icons.Material.Filled.VideogameAssetOff" Size="Size.Large" Style="color: rgba(255,255,255,0.5); font-size: 5rem;" />
                <MudText Typo="Typo.h6" Style="color: rgba(255,255,255,0.8);">Aucun jeu dans votre collection</MudText>
                <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.6);">Commencez par ajouter votre premier jeu</MudText>
            </MudStack>
        }
        else
        {
            <MudTable Items="games" Dense="true" Hover="true" Class="mt-2">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Titre</MudTh>
                    <MudTh>Créateur</MudTh>
                    <MudTh>Éditeur</MudTh>
                    <MudTh>Année</MudTh>
                    <MudTh>Plateforme</MudTh>
                    <MudTh>Âge</MudTh>
                    <MudTh Style="text-align: right;">Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.GameId</MudTd>
                    <MudTd DataLabel="Titre"><strong>@context.Item?.Title</strong></MudTd>
                    <MudTd DataLabel="Créateur">@context.Item?.Creator</MudTd>
                    <MudTd DataLabel="Éditeur">@context.Item?.Publisher</MudTd>
                    <MudTd DataLabel="Année">@context.Item?.Year</MudTd>
                    <MudTd DataLabel="Plateforme">@context.Platform</MudTd>
                    <MudTd DataLabel="Âge">@context.AgeRange</MudTd>
                    <MudTd DataLabel="Actions" Style="text-align: right;">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Info"
                                       Size="Size.Small"
                                       OnClick="() => OpenEdit(context)"
                                       Title="Modifier" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       OnClick="() => Delete(context)"
                                       Title="Supprimer" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
</div>

@if (dialogVisible)
{
    <MudOverlay Visible="true" DarkBackground="true" Absolute="false" />
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1400; width: 90%; max-width: 600px;">
        <MudPaper Class="dark-glass-paper pa-6 animate-in">
            <MudStack Spacing="3">
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.h6" Style="color: white;">@dialogTitle</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close"
                                   Color="Color.Default"
                                   OnClick="() => dialogVisible = false"
                                   Style="color: white;" />
                </MudStack>

                <MudDivider Style="background-color: rgba(255,255,255,0.2);" />

                <MudForm @ref="form">
                    <MudStack Spacing="3">
                        <MudNumericField T="int"
                                         @bind-Value="itemId"
                                         Label="ID de l'item"
                                         Required="true"
                                         Variant="Variant.Outlined" />

                        <MudTextField @bind-Value="platform"
                                      Label="Plateforme (ex: PlayStation 5, Xbox, PC)"
                                      Variant="Variant.Outlined" />

                        <MudTextField @bind-Value="ageRange"
                                      Label="Tranche d'âge (ex: 12+, 18+)"
                                      Variant="Variant.Outlined" />
                    </MudStack>
                </MudForm>

                <MudStack Row Spacing="2" Justify="Justify.SpaceEvenly" Class="mt-2">
                    <MudButton OnClick="() => dialogVisible = false"
                               Variant="Variant.Text"
                               Style="color: white;">
                        Annuler
                    </MudButton>
                    <MudButton OnClick="Save"
                               Color="Color.Primary"
                               Variant="Variant.Filled">
                        Enregistrer
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </div>
}

<link rel="stylesheet" href="css/library-theme.css" />

@code {
    private List<GameDto> games = new();
    private bool dialogVisible;
    private string dialogTitle = string.Empty;
    private MudForm? form;
    private int itemId;
    private string? platform;
    private string? ageRange;
    private int? editingId;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync() => games = (await ApiClient.GetAsync<List<GameDto>>(HttpFactory, "api/games")) ?? new();

    private void OpenCreate()
    {
        dialogTitle = "Nouveau jeu";
        editingId = null;
        itemId = 0;
        platform = null;
        ageRange = null;
        dialogVisible = true;
    }

    private void OpenEdit(GameDto dto)
    {
        dialogTitle = $"Modifier le jeu #{dto.GameId}";
        editingId = dto.GameId;
        itemId = dto.ItemId;
        platform = dto.Platform;
        ageRange = dto.AgeRange;
        dialogVisible = true;
    }

    private async Task Save()
    {
        await form!.Validate();
        if (!form.IsValid) return;

        if (editingId is null)
        {
            var resp = await ApiClient.PostAsync(HttpFactory, "api/games", new CreateGameDto(itemId, platform, ageRange));
            if (!resp.IsSuccessStatusCode) { Snackbar.Add("Erreur de création", Severity.Error); return; }
            Snackbar.Add("Jeu créé avec succès", Severity.Success);
        }
        else
        {
            var resp = await ApiClient.PutAsync(HttpFactory, $"api/games/{editingId}", new UpdateGameDto(itemId, platform, ageRange));
            if (!resp.IsSuccessStatusCode) { Snackbar.Add("Erreur de mise à jour", Severity.Error); return; }
            Snackbar.Add("Jeu modifié avec succès", Severity.Success);
        }

        dialogVisible = false;
        await LoadAsync();
    }

    private async Task Delete(GameDto dto)
    {
        var resp = await ApiClient.DeleteAsync(HttpFactory, $"api/games/{dto.GameId}");
        if (!resp.IsSuccessStatusCode) { Snackbar.Add("Suppression échouée", Severity.Error); return; }
        await LoadAsync();
        Snackbar.Add("Jeu supprimé", Severity.Success);
    }
}