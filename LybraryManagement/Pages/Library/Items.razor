@page "/items"
@using System.Linq
@using MudBlazor
@using LybraryManagement.Services
@using LybraryManagement.Shared.Library.DTOs
@inject IHttpClientFactory HttpFactory
@inject ISnackbar Snackbar

<PageTitle>Items</PageTitle>

<MudPaper Class="pa-4">
    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h5">Items</MudText>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreate">Ajouter</MudButton>
    </MudStack>

    <MudStack Row Spacing="1" Class="mt-2">
        <MudButton Color="Color.Primary" Variant="@GetVariant(ItemFilter.Books)" OnClick="@(() => SetFilter(ItemFilter.Books))">Livres</MudButton>
        <MudButton Color="Color.Primary" Variant="@GetVariant(ItemFilter.Games)" OnClick="@(() => SetFilter(ItemFilter.Games))">Jeux</MudButton>
        <MudButton Color="Color.Primary" Variant="@GetVariant(ItemFilter.Movies)" OnClick="@(() => SetFilter(ItemFilter.Movies))">Films</MudButton>
    </MudStack>

    <MudTable Items="FilteredItems" Dense="true" Hover="true" Class="mt-4">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Titre</MudTh>
            <MudTh>Auteur/Createur</MudTh>
            <MudTh>Editeur</MudTh>
            <MudTh>Annee</MudTh>
            <MudTh>SC Id</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.ItemId</MudTd>
            <MudTd DataLabel="Titre">@context.Title</MudTd>
            <MudTd DataLabel="Createur">@context.Creator</MudTd>
            <MudTd DataLabel="Editeur">@context.Publisher</MudTd>
            <MudTd DataLabel="Annee">@context.Year</MudTd>
            <MudTd DataLabel="SC Id">@context.SubcategoryId</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OpenEdit(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="async () => await Delete(context)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@if (dialogVisible)
{
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6">@dialogTitle</MudText>
        <MudForm @ref="form">
            <MudTextField @bind-Value="title" Label="Titre" Required="true" />
            <MudTextField @bind-Value="creator" Label="Createur" />
            <MudTextField @bind-Value="publisher" Label="Editeur" />
            <MudNumericField T="int?" @bind-Value="year" Label="Annee" />
            <MudTextField @bind-Value="description" Label="Description" Lines="3" />
            <MudSelect T="int?" Label="Categorie" @bind-Value="selectedCategoryId" Clearable="true" Placeholder="Toutes categories">
                @foreach (var category in categories)
                {
                    <MudSelectItem Value="@((int?)category.CategoryId)">@category.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="int?" Label="Sous-categorie" @bind-Value="subcategoryId" Clearable="true" Placeholder="Sans sous-categorie">
                @foreach (var subcategory in FilteredSubcategories)
                {
                    <MudSelectItem Value="@((int?)subcategory.SubcategoryId)">@subcategory.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="imageUrl" Label="Image URL" />
        </MudForm>
        <MudStack Row Spacing="2" Class="mt-2">
            <MudButton OnClick="Save" Color="Color.Primary">Enregistrer</MudButton>
            <MudButton OnClick="() => dialogVisible = false">Annuler</MudButton>
        </MudStack>
    </MudPaper>
}

@code {
    private enum ItemFilter
    {
        All,
        Books,
        Games,
        Movies
    }

    private List<ItemDto> items = new();
    private HashSet<int> bookItemIds = new();
    private HashSet<int> gameItemIds = new();
    private HashSet<int> movieItemIds = new();
    private List<CategoryDto> categories = new();
    private List<SubcategoryDto> subcategories = new();
    private ItemFilter currentFilter = ItemFilter.All;

    private bool dialogVisible;
    private string dialogTitle = string.Empty;
    private MudForm? form;
    private string title = string.Empty;
    private string? creator;
    private string? publisher;
    private int? year;
    private string? description;
    private int? subcategoryId;
    private string? imageUrl;
    private int? selectedCategoryId;
    private int? editingId;

    private IEnumerable<ItemDto> FilteredItems => currentFilter switch
    {
        ItemFilter.Books => items.Where(i => bookItemIds.Contains(i.ItemId)),
        ItemFilter.Games => items.Where(i => gameItemIds.Contains(i.ItemId)),
        ItemFilter.Movies => items.Where(i => movieItemIds.Contains(i.ItemId)),
        _ => items
    };

    private IEnumerable<SubcategoryDto> FilteredSubcategories => selectedCategoryId.HasValue
        ? subcategories.Where(s => s.CategoryId == selectedCategoryId)
        : subcategories;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        var allItems = await ApiClient.GetAsync<List<ItemDto>>(HttpFactory, "api/items");
        var books = await ApiClient.GetAsync<List<BookDto>>(HttpFactory, "api/books");
        var games = await ApiClient.GetAsync<List<GameDto>>(HttpFactory, "api/games");
        var movies = await ApiClient.GetAsync<List<MovieDto>>(HttpFactory, "api/movies");
        var categoryList = await ApiClient.GetAsync<List<CategoryDto>>(HttpFactory, "api/categories");
        var subcategoryList = await ApiClient.GetAsync<List<SubcategoryDto>>(HttpFactory, "api/subcategories");

        items = allItems ?? new List<ItemDto>();
        bookItemIds = books?.Select(b => b.ItemId).ToHashSet() ?? new HashSet<int>();
        gameItemIds = games?.Select(g => g.ItemId).ToHashSet() ?? new HashSet<int>();
        movieItemIds = movies?.Select(m => m.ItemId).ToHashSet() ?? new HashSet<int>();
        categories = categoryList ?? new List<CategoryDto>();
        subcategories = subcategoryList ?? new List<SubcategoryDto>();
    }

    private void OpenCreate()
    {
        dialogTitle = "Nouvel item";
        editingId = null;
        title = string.Empty;
        creator = null;
        publisher = null;
        year = null;
        description = null;
        subcategoryId = null;
        imageUrl = null;
        selectedCategoryId = null;
        dialogVisible = true;
    }

    private void OpenEdit(ItemDto dto)
    {
        dialogTitle = $"Modifier #{dto.ItemId}";
        editingId = dto.ItemId;
        title = dto.Title;
        creator = dto.Creator;
        publisher = dto.Publisher;
        year = dto.Year;
        description = dto.Description;
        subcategoryId = dto.SubcategoryId;
        imageUrl = dto.ImageUrl;

        if (subcategoryId.HasValue)
            selectedCategoryId = subcategories.FirstOrDefault(s => s.SubcategoryId == subcategoryId)?.CategoryId;
        else
            selectedCategoryId = null;

        dialogVisible = true;
    }

    private async Task Save()
    {
        await form!.Validate();
        if (!form.IsValid) return;

        var trimmedTitle = title?.Trim() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(trimmedTitle))
        {
            Snackbar.Add("Le titre est requis", Severity.Error);
            return;
        }

        if (editingId is null)
        {
            var response = await ApiClient.PostAsync(HttpFactory, "api/items", new CreateItemDto(
                trimmedTitle,
                string.IsNullOrWhiteSpace(creator) ? null : creator.Trim(),
                string.IsNullOrWhiteSpace(publisher) ? null : publisher.Trim(),
                year,
                string.IsNullOrWhiteSpace(description) ? null : description.Trim(),
                subcategoryId,
                string.IsNullOrWhiteSpace(imageUrl) ? null : imageUrl.Trim()
            ));

            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add("Erreur de création", Severity.Error);
                return;
            }
        }
        else
        {
            var response = await ApiClient.PutAsync(HttpFactory, $"api/items/{editingId}", new UpdateItemDto(
                trimmedTitle,
                string.IsNullOrWhiteSpace(creator) ? null : creator.Trim(),
                string.IsNullOrWhiteSpace(publisher) ? null : publisher.Trim(),
                year,
                string.IsNullOrWhiteSpace(description) ? null : description.Trim(),
                subcategoryId,
                string.IsNullOrWhiteSpace(imageUrl) ? null : imageUrl.Trim()
            ));

            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add("Erreur de mise à jour", Severity.Error);
                return;
            }
        }

        dialogVisible = false;
        await LoadAsync();
        Snackbar.Add("Enregistré", Severity.Success);
    }

    private async Task Delete(ItemDto dto)
    {
        var response = await ApiClient.DeleteAsync(HttpFactory, $"api/items/{dto.ItemId}");
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Suppression échouée", Severity.Error);
            return;
        }

        await LoadAsync();
        Snackbar.Add("Supprimé", Severity.Success);
    }

    private void SetFilter(ItemFilter filter)
        => currentFilter = currentFilter == filter ? ItemFilter.All : filter;

    private Variant GetVariant(ItemFilter filter)
        => currentFilter == filter ? Variant.Filled : Variant.Outlined;
}