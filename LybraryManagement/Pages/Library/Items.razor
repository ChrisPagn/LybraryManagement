@page "/items"
@using System.Linq
@using MudBlazor
@using LybraryManagement.Services
@using LybraryManagement.Shared.Library.DTOs
@inject IHttpClientFactory HttpFactory
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Items</PageTitle>

<MudPaper Class="pa-4">
    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h5">Items</MudText>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreate">Ajouter</MudButton>
    </MudStack>

    <MudStack Row Spacing="1" Class="mt-2">
        <MudButton Color="Color.Primary" Variant="@GetVariant(ItemFilter.Books)" OnClick="@(() => SetFilter(ItemFilter.Books))">Livres</MudButton>
        <MudButton Color="Color.Primary" Variant="@GetVariant(ItemFilter.Games)" OnClick="@(() => SetFilter(ItemFilter.Games))">Jeux</MudButton>
        <MudButton Color="Color.Primary" Variant="@GetVariant(ItemFilter.Movies)" OnClick="@(() => SetFilter(ItemFilter.Movies))">Films</MudButton>
    </MudStack>

    <MudTable Items="FilteredItems" Dense="true" Hover="true" Class="mt-4">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Titre</MudTh>
            <MudTh>Auteur/Createur</MudTh>
            <MudTh>Editeur</MudTh>
            <MudTh>Annee</MudTh>
            <MudTh>SC Id</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.ItemId</MudTd>
            <MudTd DataLabel="Titre">@context.Title</MudTd>
            <MudTd DataLabel="Createur">@context.Creator</MudTd>
            <MudTd DataLabel="Editeur">@context.Publisher</MudTd>
            <MudTd DataLabel="Annee">@context.Year</MudTd>
            <MudTd DataLabel="SC Id">@context.SubcategoryId</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="async () => await OpenEdit(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="async () => await Delete(context)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private enum ItemFilter
    {
        All,
        Books,
        Games,
        Movies
    }

    private List<ItemDto> items = new();
    private HashSet<int> bookItemIds = new();
    private HashSet<int> gameItemIds = new();
    private HashSet<int> movieItemIds = new();
    private List<CategoryDto> categories = new();
    private List<SubcategoryDto> subcategories = new();
    private ItemFilter currentFilter = ItemFilter.All;

    private IEnumerable<ItemDto> FilteredItems => currentFilter switch
    {
        ItemFilter.Books => items.Where(i => bookItemIds.Contains(i.ItemId)),
        ItemFilter.Games => items.Where(i => gameItemIds.Contains(i.ItemId)),
        ItemFilter.Movies => items.Where(i => movieItemIds.Contains(i.ItemId)),
        _ => items
    };

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        var allItems = await ApiClient.GetAsync<List<ItemDto>>(HttpFactory, "api/items");
        var books = await ApiClient.GetAsync<List<BookDto>>(HttpFactory, "api/books");
        var games = await ApiClient.GetAsync<List<GameDto>>(HttpFactory, "api/games");
        var movies = await ApiClient.GetAsync<List<MovieDto>>(HttpFactory, "api/movies");
        var categoryList = await ApiClient.GetAsync<List<CategoryDto>>(HttpFactory, "api/categories");
        var subcategoryList = await ApiClient.GetAsync<List<SubcategoryDto>>(HttpFactory, "api/subcategories");

        items = allItems ?? new List<ItemDto>();
        bookItemIds = books?.Select(b => b.ItemId).ToHashSet() ?? new HashSet<int>();
        gameItemIds = games?.Select(g => g.ItemId).ToHashSet() ?? new HashSet<int>();
        movieItemIds = movies?.Select(m => m.ItemId).ToHashSet() ?? new HashSet<int>();
        categories = categoryList ?? new List<CategoryDto>();
        subcategories = subcategoryList ?? new List<SubcategoryDto>();
    }

    private async Task OpenCreate()
    {
        var result = await ShowDialogAsync(null, "Nouvel item");
        if (result is null) return;

        var response = await ApiClient.PostAsync(HttpFactory, "api/items", new CreateItemDto(result.Title, result.Creator, result.Publisher, result.Year, result.Description, result.SubcategoryId, result.ImageUrl));
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Erreur de creation", Severity.Error);
            return;
        }

        Snackbar.Add("Enregistre", Severity.Success);
        await LoadAsync();
    }

    private async Task OpenEdit(ItemDto dto)
    {
        var result = await ShowDialogAsync(dto, $"Modifier #{dto.ItemId}");
        if (result is null) return;

        var response = await ApiClient.PutAsync(HttpFactory, $"api/items/{dto.ItemId}", new UpdateItemDto(result.Title, result.Creator, result.Publisher, result.Year, result.Description, result.SubcategoryId, result.ImageUrl));
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Erreur de mise a jour", Severity.Error);
            return;
        }

        Snackbar.Add("Enregistre", Severity.Success);
        await LoadAsync();
    }

    private async Task Delete(ItemDto dto)
    {
        var response = await ApiClient.DeleteAsync(HttpFactory, $"api/items/{dto.ItemId}");
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Suppression echouee", Severity.Error);
            return;
        }

        await LoadAsync();
        Snackbar.Add("Supprime", Severity.Success);
    }

    private async Task<ItemDialogResult?> ShowDialogAsync(ItemDto? item, string title)
    {
        var parameters = new DialogParameters
        {
            { nameof(ItemDialog.Item), item },
            { nameof(ItemDialog.Categories), categories },
            { nameof(ItemDialog.Subcategories), subcategories }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<ItemDialog>(title, parameters, options);

        var dialogResult = await dialogReference.Result;

        if (dialogResult is not { Canceled: false, Data: ItemDialogResult data })
        {
            return null;
        }

        return data;
    }

    private void SetFilter(ItemFilter filter)
        => currentFilter = currentFilter == filter ? ItemFilter.All : filter;

    private Variant GetVariant(ItemFilter filter)
        => currentFilter == filter ? Variant.Filled : Variant.Outlined;
}
