@page "/items"
@using System.Linq
@using MudBlazor
@using LybraryManagement.Services
@using LybraryManagement.Shared.Library.DTOs
@inject IHttpClientFactory HttpFactory
@inject ISnackbar Snackbar

<PageTitle>Items</PageTitle>

<div class="page-background"></div>

<div class="content-wrapper animate-in">
    <MudPaper Class="glass-paper pa-4 mb-4">
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Style="color: white;" />
                <MudText Typo="Typo.h5">Tous les items</MudText>
            </MudStack>
            <MudButton Color="Color.Primary" 
                       Variant="Variant.Filled" 
                       StartIcon="@Icons.Material.Filled.Add" 
                       OnClick="OpenCreate"
                       Size="Size.Large">
                Ajouter un item
            </MudButton>
        </MudStack>
    </MudPaper>

    <MudPaper Class="glass-paper pa-4 mb-4">
        <MudStack Row Spacing="2" Wrap="Wrap.Wrap">
            <MudButton Class="filter-btn"
                       Color="Color.Primary"
                       Variant="@GetVariant(ItemFilter.All)"
                       StartIcon="@Icons.Material.Filled.AllInclusive"
                       OnClick="@(() => SetFilter(ItemFilter.All))">
                Tous
            </MudButton>

            <MudButton Class="filter-btn"
                       Color="Color.Primary"
                       Variant="@GetVariant(ItemFilter.Books)"
                       StartIcon="@Icons.Material.Filled.MenuBook"
                       OnClick="@(() => SetFilter(ItemFilter.Books))">
                Livres
            </MudButton>

            <MudButton Class="filter-btn"
                       Color="Color.Primary"
                       Variant="@GetVariant(ItemFilter.Games)"
                       StartIcon="@Icons.Material.Filled.SportsEsports"
                       OnClick="@(() => SetFilter(ItemFilter.Games))">
                Jeux
            </MudButton>

            <MudButton Class="filter-btn"
                       Color="Color.Primary"
                       Variant="@GetVariant(ItemFilter.Movies)"
                       StartIcon="@Icons.Material.Filled.Movie"
                       OnClick="@(() => SetFilter(ItemFilter.Movies))">
                Films
            </MudButton>

        </MudStack>
    </MudPaper>

    <MudPaper Class="glass-paper pa-4">
        @if (items == null || !items.Any())
        {
            <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="pa-8">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Style="color: rgba(255,255,255,0.5); font-size: 5rem;" />
                <MudText Typo="Typo.h6" Style="color: rgba(255,255,255,0.8);">Aucun item dans votre collection</MudText>
                <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.6);">Commencez par ajouter votre premier item</MudText>
            </MudStack>
        }
        else if (!FilteredItems.Any())
        {
            <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="pa-8">
                <MudIcon Icon="@Icons.Material.Filled.FilterAltOff" Size="Size.Large" Style="color: rgba(255,255,255,0.5); font-size: 5rem;" />
                <MudText Typo="Typo.h6" Style="color: rgba(255,255,255,0.8);">Aucun résultat pour ce filtre</MudText>
                <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.6);">Essayez un autre filtre</MudText>
            </MudStack>
        }
        else
        {
            <MudTable Items="FilteredItems" Dense="true" Hover="true" Class="mt-2">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Titre</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Créateur</MudTh>
                    <MudTh>Éditeur</MudTh>
                    <MudTh>Année</MudTh>
                    <MudTh Style="text-align: right;">Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.ItemId</MudTd>
                    <MudTd DataLabel="Titre"><strong>@context.Title</strong></MudTd>
                    <MudTd DataLabel="Type">
                        <MudChip T="string"
                                 Size="Size.Small"
                                 Color="@GetTypeColor(context.ItemId)"
                                 Style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3);">
                            @GetItemType(context.ItemId)
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Créateur">@context.Creator</MudTd>
                    <MudTd DataLabel="Éditeur">@context.Publisher</MudTd>
                    <MudTd DataLabel="Année">@context.Year</MudTd>
                    <MudTd DataLabel="Actions" Style="text-align: right;">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                       Color="Color.Info" 
                                       Size="Size.Small"
                                       OnClick="() => OpenEdit(context)" 
                                       Title="Modifier" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                       Color="Color.Error" 
                                       Size="Size.Small"
                                       OnClick="async () => await Delete(context)"
                                       Title="Supprimer" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
</div>

@if (dialogVisible)
{
    <MudOverlay Visible="true" DarkBackground="true" Absolute="false" />
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1400; width: 90%; max-width: 700px; max-height: 90vh; overflow-y: auto;">
        <MudPaper Class="dark-glass-paper pa-6 animate-in">
            <MudStack Spacing="3">
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.h6" Style="color: white;">@dialogTitle</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                   Color="Color.Default" 
                                   OnClick="() => dialogVisible = false"
                                   Style="color: white;" />
                </MudStack>
                
                <MudDivider Style="background-color: rgba(255,255,255,0.2);" />
                
                <MudForm @ref="form">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.subtitle1" Style="color: rgba(255,255,255,0.9); font-weight: 600;">Informations générales</MudText>
                        
                        <MudSelect T="string" 
                                   Label="Type d'item" 
                                   @bind-Value="itemType" 
                                   Required="true" 
                                   Disabled="@(editingId.HasValue)"
                                   Variant="Variant.Outlined">
                            <MudSelectItem Value="@("Book")">?? Livre</MudSelectItem>
                            <MudSelectItem Value="@("Game")">?? Jeu</MudSelectItem>
                            <MudSelectItem Value="@("Movie")">?? Film</MudSelectItem>
                        </MudSelect>

                        <MudTextField @bind-Value="title" 
                                     Label="Titre" 
                                     Required="true"
                                     Variant="Variant.Outlined" />
                        
                        <MudTextField @bind-Value="creator" 
                                     Label="Créateur / Auteur"
                                     Variant="Variant.Outlined" />
                        
                        <MudTextField @bind-Value="publisher" 
                                     Label="Éditeur"
                                     Variant="Variant.Outlined" />
                        
                        <MudNumericField T="int?" 
                                        @bind-Value="year" 
                                        Label="Année"
                                        Variant="Variant.Outlined" />
                        
                        <MudTextField @bind-Value="description" 
                                     Label="Description" 
                                     Lines="3"
                                     Variant="Variant.Outlined" />

                        <MudSelect T="int?" 
                                   Label="Catégorie" 
                                   @bind-Value="selectedCategoryId" 
                                   Clearable="true" 
                                   Placeholder="Toutes catégories"
                                   Variant="Variant.Outlined">
                            @foreach (var category in categories)
                            {
                                <MudSelectItem Value="@((int?)category.CategoryId)">@category.Name</MudSelectItem>
                            }
                        </MudSelect>

                        <MudSelect T="int?" 
                                   Label="Sous-catégorie" 
                                   @bind-Value="subcategoryId" 
                                   Clearable="true" 
                                   Placeholder="Sans sous-catégorie"
                                   Variant="Variant.Outlined">
                            @foreach (var subcategory in FilteredSubcategories)
                            {
                                <MudSelectItem Value="@((int?)subcategory.SubcategoryId)">@subcategory.Name</MudSelectItem>
                            }
                        </MudSelect>

                        <MudTextField @bind-Value="imageUrl" 
                                     Label="URL de l'image"
                                     Variant="Variant.Outlined" />

                        <MudDivider Style="background-color: rgba(255,255,255,0.2);" Class="my-2" />
                        <MudText Typo="Typo.subtitle1" Style="color: rgba(255,255,255,0.9); font-weight: 600;">Informations spécifiques</MudText>

                        @if (itemType == "Book")
                        {
                            <MudSelect T="int?" 
                                       Label="Genre littéraire" 
                                       @bind-Value="genreId" 
                                       Clearable="true"
                                       Variant="Variant.Outlined">
                                @foreach (var genre in genres)
                                {
                                    <MudSelectItem Value="@((int?)genre.GenreId)">@genre.Name</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField @bind-Value="isbn" 
                                         Label="ISBN"
                                         Variant="Variant.Outlined" />
                        }
                        else if (itemType == "Game")
                        {
                            <MudTextField @bind-Value="platform" 
                                         Label="Plateforme (ex: PlayStation 5, Xbox, PC)"
                                         Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="ageRange" 
                                         Label="Tranche d'âge (ex: 12+, 18+)"
                                         Variant="Variant.Outlined" />
                        }
                        else if (itemType == "Movie")
                        {
                            <MudTextField @bind-Value="durationText" 
                                         Label="Durée (format: hh:mm:ss)"
                                         Placeholder="02:15:00"
                                         Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="rating" 
                                         Label="Classification (ex: PG-13, R, Tout public)"
                                         Variant="Variant.Outlined" />
                        }
                    </MudStack>
                </MudForm>
                
                <MudStack Row Spacing="2" Justify="Justify.SpaceEvenly" Class="mt-2">
                    <MudButton OnClick="() => dialogVisible = false" 
                               Variant="Variant.Text"
                               Style="color: white;">
                        Annuler
                    </MudButton>
                    <MudButton OnClick="Save" 
                               Color="Color.Primary"
                               Variant="Variant.Filled">
                        Enregistrer
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </div>
}

<link rel="stylesheet" href="css/library-theme.css" />

@code {
    private enum ItemFilter { All, Books, Games, Movies }

    private List<ItemDto> items = new();
    private HashSet<int> bookItemIds = new();
    private HashSet<int> gameItemIds = new();
    private HashSet<int> movieItemIds = new();
    private List<CategoryDto> categories = new();
    private List<SubcategoryDto> subcategories = new();
    private List<GenreDto> genres = new();
    private ItemFilter currentFilter = ItemFilter.All;

    private bool dialogVisible;
    private string dialogTitle = string.Empty;
    private MudForm? form;

    private string title = string.Empty;
    private string? creator;
    private string? publisher;
    private int? year;
    private string? description;
    private int? subcategoryId;
    private string? imageUrl;
    private int? selectedCategoryId;
    private int? editingId;

    private string itemType = "Book";

    private int? genreId;
    private string? isbn;

    private string? platform;
    private string? ageRange;

    private string? durationText;
    private string? rating;

    private IEnumerable<ItemDto> FilteredItems => currentFilter switch
    {
        ItemFilter.Books => items.Where(i => bookItemIds.Contains(i.ItemId)),
        ItemFilter.Games => items.Where(i => gameItemIds.Contains(i.ItemId)),
        ItemFilter.Movies => items.Where(i => movieItemIds.Contains(i.ItemId)),
        _ => items
    };

    private IEnumerable<SubcategoryDto> FilteredSubcategories => selectedCategoryId.HasValue
        ? subcategories.Where(s => s.CategoryId == selectedCategoryId)
        : subcategories;

    private string GetItemType(int itemId)
    {
        if (bookItemIds.Contains(itemId)) return "Livre";
        if (gameItemIds.Contains(itemId)) return "Jeu";
        if (movieItemIds.Contains(itemId)) return "Film";
        return "Non défini";
    }

    private Color GetTypeColor(int itemId)
    {
        if (bookItemIds.Contains(itemId)) return Color.Primary;
        if (gameItemIds.Contains(itemId)) return Color.Tertiary;
        if (movieItemIds.Contains(itemId)) return Color.Secondary;
        return Color.Default;
    }

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        var allItems = await ApiClient.GetAsync<List<ItemDto>>(HttpFactory, "api/items");
        var books = await ApiClient.GetAsync<List<BookDto>>(HttpFactory, "api/books");
        var games = await ApiClient.GetAsync<List<GameDto>>(HttpFactory, "api/games");
        var movies = await ApiClient.GetAsync<List<MovieDto>>(HttpFactory, "api/movies");
        var categoryList = await ApiClient.GetAsync<List<CategoryDto>>(HttpFactory, "api/categories");
        var subcategoryList = await ApiClient.GetAsync<List<SubcategoryDto>>(HttpFactory, "api/subcategories");
        var genreList = await ApiClient.GetAsync<List<GenreDto>>(HttpFactory, "api/genres");

        items = allItems ?? new List<ItemDto>();
        bookItemIds = books?.Select(b => b.ItemId).ToHashSet() ?? new HashSet<int>();
        gameItemIds = games?.Select(g => g.ItemId).ToHashSet() ?? new HashSet<int>();
        movieItemIds = movies?.Select(m => m.ItemId).ToHashSet() ?? new HashSet<int>();
        categories = categoryList ?? new List<CategoryDto>();
        subcategories = subcategoryList ?? new List<SubcategoryDto>();
        genres = genreList ?? new List<GenreDto>();
    }

    private void OpenCreate()
    {
        dialogTitle = "Nouvel item";
        editingId = null;
        itemType = "Book";
        title = string.Empty;
        creator = null;
        publisher = null;
        year = null;
        description = null;
        subcategoryId = null;
        imageUrl = null;
        selectedCategoryId = null;

        genreId = null;
        isbn = null;
        platform = null;
        ageRange = null;
        durationText = null;
        rating = null;

        dialogVisible = true;
    }

    private void OpenEdit(ItemDto dto)
    {
        dialogTitle = $"Modifier l'item #{dto.ItemId}";
        editingId = dto.ItemId;
        title = dto.Title;
        creator = dto.Creator;
        publisher = dto.Publisher;
        year = dto.Year;
        description = dto.Description;
        subcategoryId = dto.SubcategoryId;
        imageUrl = dto.ImageUrl;

        if (subcategoryId.HasValue)
            selectedCategoryId = subcategories.FirstOrDefault(s => s.SubcategoryId == subcategoryId)?.CategoryId;
        else
            selectedCategoryId = null;

        if (bookItemIds.Contains(dto.ItemId))
        {
            itemType = "Book";
            LoadBookData(dto.ItemId);
        }
        else if (gameItemIds.Contains(dto.ItemId))
        {
            itemType = "Game";
            LoadGameData(dto.ItemId);
        }
        else if (movieItemIds.Contains(dto.ItemId))
        {
            itemType = "Movie";
            LoadMovieData(dto.ItemId);
        }

        dialogVisible = true;
    }

    private async void LoadBookData(int itemId)
    {
        var books = await ApiClient.GetAsync<List<BookDto>>(HttpFactory, "api/books");
        var book = books?.FirstOrDefault(b => b.ItemId == itemId);
        if (book != null)
        {
            genreId = book.GenreId;
            isbn = book.Isbn;
        }
    }

    private async void LoadGameData(int itemId)
    {
        var games = await ApiClient.GetAsync<List<GameDto>>(HttpFactory, "api/games");
        var game = games?.FirstOrDefault(g => g.ItemId == itemId);
        if (game != null)
        {
            platform = game.Platform;
            ageRange = game.AgeRange;
        }
    }

    private async void LoadMovieData(int itemId)
    {
        var movies = await ApiClient.GetAsync<List<MovieDto>>(HttpFactory, "api/movies");
        var movie = movies?.FirstOrDefault(m => m.ItemId == itemId);
        if (movie != null)
        {
            durationText = movie.Duration?.ToString();
            rating = movie.Rating;
        }
    }

    private async Task Save()
    {
        await form!.Validate();
        if (!form.IsValid) return;

        var trimmedTitle = title?.Trim() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(trimmedTitle))
        {
            Snackbar.Add("Le titre est requis", Severity.Error);
            return;
        }

        if (string.IsNullOrWhiteSpace(itemType))
        {
            Snackbar.Add("Le type d'item est requis", Severity.Error);
            return;
        }

        int itemId;
        if (editingId is null)
        {
            var itemResponse = await ApiClient.PostAsync(HttpFactory, "api/items", new CreateItemDto(
                trimmedTitle,
                string.IsNullOrWhiteSpace(creator) ? null : creator.Trim(),
                string.IsNullOrWhiteSpace(publisher) ? null : publisher.Trim(),
                year,
                string.IsNullOrWhiteSpace(description) ? null : description.Trim(),
                subcategoryId,
                string.IsNullOrWhiteSpace(imageUrl) ? null : imageUrl.Trim()
            ));

            if (!itemResponse.IsSuccessStatusCode)
            {
                Snackbar.Add("Erreur lors de la création de l'item", Severity.Error);
                return;
            }

            var createdItem = await itemResponse.Content.ReadFromJsonAsync<ItemDto>();
            itemId = createdItem!.ItemId;
        }
        else
        {
            itemId = editingId.Value;
            var itemResponse = await ApiClient.PutAsync(HttpFactory, $"api/items/{itemId}", new UpdateItemDto(
                trimmedTitle,
                string.IsNullOrWhiteSpace(creator) ? null : creator.Trim(),
                string.IsNullOrWhiteSpace(publisher) ? null : publisher.Trim(),
                year,
                string.IsNullOrWhiteSpace(description) ? null : description.Trim(),
                subcategoryId,
                string.IsNullOrWhiteSpace(imageUrl) ? null : imageUrl.Trim()
            ));

            if (!itemResponse.IsSuccessStatusCode)
            {
                Snackbar.Add("Erreur lors de la mise à jour de l'item", Severity.Error);
                return;
            }
        }

        bool specificSuccess = false;
        if (itemType == "Book")
        {
            specificSuccess = await SaveBookData(itemId);
        }
        else if (itemType == "Game")
        {
            specificSuccess = await SaveGameData(itemId);
        }
        else if (itemType == "Movie")
        {
            specificSuccess = await SaveMovieData(itemId);
        }

        if (!specificSuccess) return;

        dialogVisible = false;
        await LoadAsync();
        Snackbar.Add("Item enregistré avec succès", Severity.Success);
    }

    private async Task<bool> SaveBookData(int itemId)
    {
        if (editingId is null)
        {
            var response = await ApiClient.PostAsync(HttpFactory, "api/books", new CreateBookDto(itemId, genreId, isbn));
            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add("Erreur lors de la création du livre", Severity.Error);
                return false;
            }
        }
        else
        {
            var books = await ApiClient.GetAsync<List<BookDto>>(HttpFactory, "api/books");
            var book = books?.FirstOrDefault(b => b.ItemId == itemId);
            if (book != null)
            {
                var response = await ApiClient.PutAsync(HttpFactory, $"api/books/{book.BookId}", new UpdateBookDto(itemId, genreId, isbn));
                if (!response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Erreur lors de la mise à jour du livre", Severity.Error);
                    return false;
                }
            }
        }
        return true;
    }

    private async Task<bool> SaveGameData(int itemId)
    {
        if (editingId is null)
        {
            var response = await ApiClient.PostAsync(HttpFactory, "api/games", new CreateGameDto(itemId, platform, ageRange));
            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add("Erreur lors de la création du jeu", Severity.Error);
                return false;
            }
        }
        else
        {
            var games = await ApiClient.GetAsync<List<GameDto>>(HttpFactory, "api/games");
            var game = games?.FirstOrDefault(g => g.ItemId == itemId);
            if (game != null)
            {
                var response = await ApiClient.PutAsync(HttpFactory, $"api/games/{game.GameId}", new UpdateGameDto(itemId, platform, ageRange));
                if (!response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Erreur lors de la mise à jour du jeu", Severity.Error);
                    return false;
                }
            }
        }
        return true;
    }

    private async Task<bool> SaveMovieData(int itemId)
    {
        var duration = !string.IsNullOrWhiteSpace(durationText) && TimeSpan.TryParse(durationText, out var ts)
            ? ts
            : null as TimeSpan?;

        if (editingId is null)
        {
            var response = await ApiClient.PostAsync(HttpFactory, "api/movies", new CreateMovieDto(itemId, duration, rating));
            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add("Erreur lors de la création du film", Severity.Error);
                return false;
            }
        }
        else
        {
            var movies = await ApiClient.GetAsync<List<MovieDto>>(HttpFactory, "api/movies");
            var movie = movies?.FirstOrDefault(m => m.ItemId == itemId);
            if (movie != null)
            {
                var response = await ApiClient.PutAsync(HttpFactory, $"api/movies/{movie.MovieId}", new UpdateMovieDto(itemId, duration, rating));
                if (!response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Erreur lors de la mise à jour du film", Severity.Error);
                    return false;
                }
            }
        }
        return true;
    }

    private async Task Delete(ItemDto dto)
    {
        var response = await ApiClient.DeleteAsync(HttpFactory, $"api/items/{dto.ItemId}");
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Suppression échouée", Severity.Error);
            return;
        }

        await LoadAsync();
        Snackbar.Add("Item supprimé avec succès", Severity.Success);
    }

    private void SetFilter(ItemFilter filter)
        => currentFilter = currentFilter == filter ? ItemFilter.All : filter;

    private Variant GetVariant(ItemFilter filter)
        => currentFilter == filter ? Variant.Filled : Variant.Outlined;
}