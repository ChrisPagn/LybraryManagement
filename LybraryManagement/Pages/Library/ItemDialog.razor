@using System
@using System.Linq
@using MudBlazor
@using LybraryManagement.Shared.Library.DTOs

<MudDialog>
    <DialogContent>
        <MudForm @ref="form">
            <MudTextField @bind-Value="model.Title" Label="Titre" Required="true" />
            <MudTextField @bind-Value="model.Creator" Label="Createur" />
            <MudTextField @bind-Value="model.Publisher" Label="Editeur" />
            <MudNumericField T="int?" @bind-Value="model.Year" Label="Annee" />
            <MudTextField @bind-Value="model.Description" Label="Description" Lines="3" />
            <MudSelect T="int?" Label="Categorie" @bind-Value="SelectedCategoryId" Clearable="true" Placeholder="Toutes categories">
                @foreach (var category in Categories)
                {
                    <MudSelectItem Value="@((int?)category.CategoryId)">@category.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="int?" Label="Sous-categorie" @bind-Value="model.SubcategoryId" Clearable="true" Placeholder="Sans sous-categorie">
                @foreach (var subcategory in FilteredSubcategories)
                {
                    <MudSelectItem Value="@((int?)subcategory.SubcategoryId)">@subcategory.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="model.ImageUrl" Label="Image URL" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Default">Annuler</MudButton>
        <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled">Enregistrer</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public ItemDto? Item { get; set; }
    [Parameter] public IReadOnlyList<CategoryDto> Categories { get; set; } = Array.Empty<CategoryDto>();
    [Parameter] public IReadOnlyList<SubcategoryDto> Subcategories { get; set; } = Array.Empty<SubcategoryDto>();

    private MudForm? form;
    private ItemDialogModel model = new();
    private int? selectedCategoryId;

    private IEnumerable<SubcategoryDto> FilteredSubcategories => selectedCategoryId.HasValue
        ? Subcategories.Where(s => s.CategoryId == selectedCategoryId)
        : Subcategories;

    protected override void OnInitialized()
    {
        model = new ItemDialogModel
        {
            ItemId = Item?.ItemId,
            Title = Item?.Title ?? string.Empty,
            Creator = Item?.Creator,
            Publisher = Item?.Publisher,
            Year = Item?.Year,
            Description = Item?.Description,
            SubcategoryId = Item?.SubcategoryId,
            ImageUrl = Item?.ImageUrl
        };

        if (model.SubcategoryId.HasValue)
        {
            selectedCategoryId = Subcategories.FirstOrDefault(s => s.SubcategoryId == model.SubcategoryId)?.CategoryId;
        }
    }

    private int? SelectedCategoryId
    {
        get => selectedCategoryId;
        set
        {
            if (selectedCategoryId == value)
                return;
            selectedCategoryId = value;
            if (model.SubcategoryId.HasValue && !FilteredSubcategories.Any(s => s.SubcategoryId == model.SubcategoryId))
            {
                model.SubcategoryId = null;
            }
        }
    }

    private async Task Submit()
    {
        if (form is null) return;

        await form.Validate();
        if (!form.IsValid) return;

        var trimmedTitle = model.Title.Trim();
        if (string.IsNullOrWhiteSpace(trimmedTitle))
        {
            model.Title = string.Empty;
            await form.Validate();
            return;
        }

        var result = new ItemDialogResult(
            model.ItemId,
            trimmedTitle,
            string.IsNullOrWhiteSpace(model.Creator) ? null : model.Creator.Trim(),
            string.IsNullOrWhiteSpace(model.Publisher) ? null : model.Publisher.Trim(),
            model.Year,
            string.IsNullOrWhiteSpace(model.Description) ? null : model.Description.Trim(),
            model.SubcategoryId,
            string.IsNullOrWhiteSpace(model.ImageUrl) ? null : model.ImageUrl.Trim());

        MudDialog?.Close(DialogResult.Ok(result));
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private class ItemDialogModel
    {
        public int? ItemId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string? Creator { get; set; }
        public string? Publisher { get; set; }
        public int? Year { get; set; }
        public string? Description { get; set; }
        public int? SubcategoryId { get; set; }
        public string? ImageUrl { get; set; }
    }
}